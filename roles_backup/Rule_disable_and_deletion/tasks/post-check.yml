---
# Generate CSV content
- name: Generate disabled rules CSV
  when: action_type == 'extract_disabled'
  ansible.builtin.set_fact:
    csv_content: |
      Rule Name,Rule ID,Status,Source,Destination,Service,Action,Date,Time
      {% for rule in disabled_rules_list | default([]) %}
      "{{ rule.name }}","{{ rule.id }}","Disabled","{{ rule.sourceNetworks.objects[0].name if rule.sourceNetworks.objects is defined else 'Any' }}","{{ rule.destinationNetworks.objects[0].name if rule.destinationNetworks.objects is defined else 'Any' }}","{{ rule.destinationPorts.objects[0].name if rule.destinationPorts.objects is defined else 'Any' }}","{{ rule.action }}","{{ report_date }}","{{ report_time }}"
      {% endfor %}

- name: Generate processed rules CSV
  when: action_type in ['disable', 'delete']
  ansible.builtin.set_fact:
    csv_content: |
      Rule Name,Rule ID,Action Taken,Processing Date,Processing Time,Status
      {% for rule in processed_rules %}
      "{{ rule.name }}","{{ rule.id }}","{{ rule.action | upper }}","{{ report_date }}","{{ report_time }}","Completed"
      {% endfor %}

# Create files locally
- name: Create temp CSV file
  ansible.builtin.tempfile:
    state: file
    suffix: .csv
  register: temp_csv
  delegate_to: localhost

- name: Write CSV content
  ansible.builtin.copy:
    content: "{{ csv_content }}"
    dest: "{{ temp_csv.path }}"
  delegate_to: localhost

- name: Create temp report file
  ansible.builtin.tempfile:
    state: file
    suffix: .txt
  register: temp_report
  delegate_to: localhost

- name: Write report content
  ansible.builtin.copy:
    content: |
      FMC Rule Management Report
      ==========================
      Execution ID: {{ execution_id }}
      Policy: {{ policy_name }}
      Action: {{ action_type | upper | replace('_', ' ') }}
      Date: {{ report_date }}
      Time: {{ report_time }}
      
      SUMMARY
      -------
      {% if action_type == 'extract_disabled' %}
      Total Disabled Rules Found: {{ disabled_rules_list | length | default(0) }}
      {% if delete_disabled | default('no') | lower == 'yes' %}
      Rules Deleted: {{ deleted_rules | length | default(0) }}
      {% endif %}
      {% else %}
      Rules Processed: {{ processed_rules | length | default(0) }}
      {% endif %}
      
      RULES DETAILS
      -------------
      {% if action_type == 'extract_disabled' %}
      {% for rule in disabled_rules_list | default([]) %}
      - {{ rule.name }} (ID: {{ rule.id }})
      {% endfor %}
      {% endif %}
      
      ---
      Generated by Ansible Automation Platform
      Report ID: {{ execution_id }}
    dest: "{{ temp_report.path }}"
  delegate_to: localhost

# Email Section
- name: Send email report via Gmail
  when:
    - email_to is defined and email_to | length > 0
  delegate_to: localhost
  ansible.builtin.mail:
    host: "smtp.gmail.com"
    port: 587
    username: "{{ smtp_username }}"
    password: "{{ smtp_password }}"
    from: "{{ smtp_username }}"
    to: "{{ email_to }}"
    subject: "FMC Rule Management Report - {{ policy_name }} - {{ execution_id }}"
    body: |
      FMC Rule Management Report
      ==========================
      
      Policy: {{ policy_name }}
      Action: {{ action_type | upper | replace('_', ' ') }}
      Execution Time: {{ report_date }} at {{ report_time }}
      
      Summary:
      --------
      {% if action_type == 'extract_disabled' %}
      Total Disabled Rules Found: {{ disabled_rules_list | length | default(0) }}
      {% if delete_disabled | default('no') | lower == 'yes' %}
      Rules Deleted: {{ deleted_rules | length | default(0) }}
      {% endif %}
      {% else %}
      Rules Processed: {{ processed_rules | length | default(0) }}
      {% endif %}
      
      Please find the detailed CSV report attached.
      
      ---
      Generated by Ansible Automation Platform
      Report ID: {{ execution_id }}
    attach:
      - "{{ temp_csv.path }}"
      - "{{ temp_report.path }}"
    secure: "starttls"
    charset: "utf-8"
  register: email_result
  failed_when: false

# GitHub Upload Section
- name: Upload to GitHub
  when:
    - github_repo_owner is defined
    - github_repo_name is defined
    - github_token is defined
  block:
    - name: Check GitHub repository
      delegate_to: localhost
      ansible.builtin.uri:
        url: "https://api.github.com/repos/{{ github_repo_owner }}/{{ github_repo_name }}"
        method: GET
        headers:
          Authorization: "token {{ github_token }}"
          Accept: "application/vnd.github.v3+json"
        status_code: [200, 404]
        validate_certs: yes
      register: repo_check
      failed_when: false

    - name: Set GitHub branch
      ansible.builtin.set_fact:
        github_branch_name: "{{ repo_check.json.default_branch | default('main') }}"
      when: repo_check.status == 200

    - name: Read CSV file for GitHub
      delegate_to: localhost
      ansible.builtin.slurp:
        src: "{{ temp_csv.path }}"
      register: csv_file_content
      when: repo_check.status == 200

    - name: Read report file for GitHub
      delegate_to: localhost
      ansible.builtin.slurp:
        src: "{{ temp_report.path }}"
      register: report_file_content
      when: repo_check.status == 200

    - name: Set GitHub path
      ansible.builtin.set_fact:
        github_repo_path: "reports/fmc_rules/{{ report_date }}"

    - name: Upload CSV to GitHub
      delegate_to: localhost
      ansible.builtin.uri:
        url: "https://api.github.com/repos/{{ github_repo_owner }}/{{ github_repo_name }}/contents/{{ github_repo_path }}/rules_{{ action_type }}_{{ execution_id }}.csv"
        method: PUT
        headers:
          Authorization: "token {{ github_token }}"
          Accept: "application/vnd.github.v3+json"
          Content-Type: "application/json"
        body_format: json
        body:
          message: "FMC Rule Report - {{ policy_name }} - {{ action_type }} - {{ execution_id }}"
          content: "{{ csv_file_content.content }}"
          branch: "{{ github_branch_name }}"
        status_code: [200, 201]
        validate_certs: yes
      register: github_csv_upload
      failed_when: false
      when: repo_check.status == 200

    - name: Upload report to GitHub
      delegate_to: localhost
      ansible.builtin.uri:
        url: "https://api.github.com/repos/{{ github_repo_owner }}/{{ github_repo_name }}/contents/{{ github_repo_path }}/rule_report_{{ execution_id }}.txt"
        method: PUT
        headers:
          Authorization: "token {{ github_token }}"
          Accept: "application/vnd.github.v3+json"
          Content-Type: "application/json"
        body_format: json
        body:
          message: "FMC Rule Report - {{ policy_name }} - {{ action_type }} - {{ execution_id }}"
          content: "{{ report_file_content.content }}"
          branch: "{{ github_branch_name }}"
        status_code: [200, 201]
        validate_certs: yes
      register: github_report_upload
      failed_when: false
      when: repo_check.status == 200

# Cleanup temp files
- name: Cleanup temp files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  delegate_to: localhost
  loop:
    - "{{ temp_csv.path }}"
    - "{{ temp_report.path }}"
  when: 
    - temp_csv is defined
    - temp_report is defined

# Final Summary
- name: Display summary
  ansible.builtin.debug:
    msg:
      - "======================================"
      - "EXECUTION COMPLETE"
      - "======================================"
      - "Execution ID: {{ execution_id }}"
      - "Status: {{ execution_status | upper }}"
      - "Policy: {{ policy_name }}"
      - "Action: {{ action_type | upper | replace('_', ' ') }}"
      - "{% if action_type == 'extract_disabled' %}Disabled Rules Found: {{ disabled_rules_list | length | default(0) }}{% endif %}"
      - "{% if delete_disabled | default('no') | lower == 'yes' %}Rules Deleted: {{ deleted_rules | length | default(0) }}{% endif %}"
      - "{% if processed_rules | length > 0 %}Processed Rules: {{ processed_rules | length | default(0) }}{% endif %}"
      - "Email: {{ 'Sent to ' + email_to if (email_result is defined and not email_result.failed) else 'Not sent' }}"
      - "GitHub: {{ 'Uploaded successfully' if (github_csv_upload is defined and github_csv_upload.status in [200, 201]) else 'Not uploaded' }}"
      - "======================================"